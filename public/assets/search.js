// Generated by CoffeeScript 2.4.1
(function() {
  //						XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest
  var API, SearchResults;

  SearchResults = class SearchResults {
    constructor(word1, usages) {
      this.word = word1;
      this.usages = usages;
    }

    toHtml() {
      var example, highLightWord, i, len, ref, results1;
      highLightWord = function(str, word) {
        return str.replace(new RegExp(word, 'gi'), `<strong>${word}</strong>`);
      };
      ref = this.usages;
      results1 = [];
      for (i = 0, len = ref.length; i < len; i++) {
        example = ref[i];
        results1.push(`<p>${highLightWord(example, this.word)}</p>`);
      }
      return results1;
    }

    isEmpty() {
      return this.usages.length === 0;
    }

  };

  API = class API {
    search(keyword, callback) {
      var xhr;
      xhr = new XMLHttpRequest;
      xhr.open("GET", `http://localhost:8080/api/get-word-usages/${encodeURI(keyword)}`, true);
      xhr.onreadystatechange = function() {
        var response, results;
        if (xhr.readyState === 4) {
          if (xhr.status === 200) {
            response = JSON.parse(xhr.responseText);
            results = response.usages;
            return callback(new SearchResults(response.word, response.usages));
          }
        }
      };
      return xhr.send(null);
    }

  };

  this.doSearch = function() {
    var $, appender, word;
    $ = function(id) {
      return document.getElementById(id);
    };
    word = $("searchQuery").value;
    console.log(`WORD:${word}`);
    appender = function(data) {
      console.log(data);
      if (!data.isEmpty()) {
        console.log(data);
        $('wiki-examples').innerHTML = '';
        return data.toHtml().forEach(function(x) {
          return $('wiki-examples').innerHTML += `${x}`;
        });
      } else {
        console.log('empty result');
        return $('wiki-examples').innerHTML = 'no results';
      }
    };
    return (new API).search(word, appender);
  };

  // search = new API
// search.search('reload', (x) -> console.log x.toHtml())

}).call(this);
